# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

# what image the build files are create on, not what they will be deployed to
# you can use a MS hosted image that is guaranteed to access NuGet
# you can use a self hosted VM that is not guaranteed to access NuGet as a work around you can cache your dependencies so they are always reachable
pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

# straightforward approach that mirrors what's student have seen
# pros: very straightforward, very concise
# steps:
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'

# less straightforward, but is extensible, and more realistic to what they will see in the future (assumption)
# ask engineers what is the MS preferred way of writing YAML pipelines
steps:
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    arguments: --configuration $(buildConfiguration)
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'myWebsiteName'

# implicit publish all projects in this repository that are web projects
# ask engineers how the DotNeteCoreCLI determine if a project is a web project
# steps:
# - task: DotNetCoreCLI@2
#   inputs:
#     command: publish
#     publishWebProjects: True

# explicit 
# steps:
# - task: DotNetCoreCLI@2
#   inputs:
#    command: publish
#    projects: CodingEventsAPI/CodingEventsAPI.proj
#    arguments: --configuration $(BuildConfiguration) --output $(Build.ArtifiactStagingDirectory) -r win-x64



# LOOK UP CONDITIONAL STAGES!!!